// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Noise;
float NoiseScale;
int NoiseWidth;
int NoiseHeight;

int OctaveCount;
float Lacunarity;
float Gain;

// Swapping
bool NoiseQuinticInterpolation;
int HashType;
int NoiseType;

#define NOISE_TYPE_VALUE 0
#define NOISE_TYPE_GRADIENT 1
#define NOISE_TYPE_VORONOI 2

#define HASH_INT 0
#define HASH_FLOAT 1

// =========================
// HASH
// =========================
uint xxhash32(inout uint p)
{
    const uint PRIME32_2 = 2246822519U, PRIME32_3 = 3266489917U;
    const uint PRIME32_4 = 668265263U, PRIME32_5 = 374761393U;
    uint h32 = p + PRIME32_5;
    h32 = PRIME32_4 * ((h32 << 17) | (h32 >> (32 - 17)));
    h32 = PRIME32_2 * (h32 ^ (h32 >> 15));
    h32 = PRIME32_3 * (h32 ^ (h32 >> 13));
    p = h32 ^ (h32 >> 16);
    return p;
}

float HashInt(float2 n)
{
    uint val = uint(n.x * 29 + n.y * 47 + 83);
    return float(xxhash32(val)) / 4294967296.0;
}

float HashFloat(float2 n)
{
    return frac(sin(n.x + n.y * 543.0) * 43758.5453123);
}

float Hash(float2 n)
{
    float val = 0.0;
	switch (HashType)
	{
		case HASH_INT:
            val = HashInt(n);
			break;
        case HASH_FLOAT:
            val = HashFloat(n);
            break;
    }

    return val;
}

// =========================
// VALUE
// =========================

float ValueNoise(float2 n)
{
    float2 fPos = frac(n); // removes everything before the comma
    float2 iPos = floor(n);

    fPos = NoiseQuinticInterpolation ?
				fPos * fPos * fPos * (fPos * (fPos * 6.0 - 15) + 10) : // quintic 
				fPos * fPos * (3 - 2 * fPos); // cubic

    return lerp(    lerp(Hash(iPos + float2(0, 0)), Hash(iPos + float2(1, 0)), fPos.x),
					lerp(Hash(iPos + float2(0, 1)), Hash(iPos + float2(1, 1)), fPos.x),
					fPos.y);
}

// =========================
// GRADIENT
// =========================
#define PI2 6.283185307179586476925286766559

float2 GetGradient(float2 pos)
{
    float rnd = Hash(pos);
    return float2(sin(rnd * PI2), cos(rnd * PI2));
}

float GradientNoise(float2 pos)
{
    float2 fPos = frac(pos); // removes everything before the comma
    float2 iPos = floor(pos);

    fPos = NoiseQuinticInterpolation ?
				fPos * fPos * fPos * (fPos * (fPos * 6.0 - 15) + 10) : // quintic 
				fPos * fPos * (3 - 2 * fPos); // cubic

    return (lerp(   lerp(   dot(GetGradient(iPos + float2(0, 0)), fPos - float2(0, 0)), 
							dot(GetGradient(iPos + float2(1, 0)), fPos - float2(1, 0)), fPos.x),
					lerp(   dot(GetGradient(iPos + float2(0, 1)), fPos - float2(0, 1)),
							dot(GetGradient(iPos + float2(1, 1)), fPos - float2(1, 1)), fPos.x),
					fPos.y) + 1) * 0.5;
}

// =========================
// fBm
// =========================

float GetNoise(float2 coord)
{
    float noise = 0.0;

    switch (NoiseType)
    {
        case NOISE_TYPE_VALUE:
            noise = ValueNoise(coord);
            break;
        case NOISE_TYPE_GRADIENT:
            noise = GradientNoise(coord);
            break;
        case NOISE_TYPE_VORONOI:
            break;
    }

    return noise;
}

float GetfBm(float2 coord)
{
    float value = 0.0;
    float freq = 1.0;
    float amplitude = 1.0;
    float accumulated = 1.0;
    for (int oct = 0; oct < clamp(OctaveCount, 1, 15); oct++)
    {
        float noiseOctave = GetNoise(coord * freq) * amplitude;
        accumulated = accumulated + amplitude;
        freq = freq * Lacunarity;
        amplitude = amplitude * Gain;
        value = value + noiseOctave;
    }

    return value / accumulated;
}

// Per pixel
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Noise[id.xy] = 1.0f;
    //return;
    float2 coord = float2(  id.x / (float) NoiseWidth, 
							id.y / (float) NoiseHeight) * NoiseScale;

    Noise[id.xy] = GetfBm(coord);
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
